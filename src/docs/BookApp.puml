@startuml

package presentation {
    +class Main {
        +{static}main(args: String[]): void
    }

    +class HomeScreenView {
        +HomeScreenView()
    }

    +class HomeScreenController {
        -view: HomeScreenView

        +HomeScreenController(view: HomeScreenView)
    }

    +class LoginView {
        -usernameInput: JTextField
        -passwordInput: JPasswordField
        -submitButton: JButton
        -errorLabel: JLabel

        +LoginView()

        +show(): void
        +hide(): void
        +displayIncorrectUsername(): void
        +displayIncorrectPassword(): void
        +displaySuccess(): void
        ' when user click on submit -> handle login
        +addLoginListener(listener: ActionListener): void
    }

    +class LoginController {
        -view: LoginView
        -authService: AuthenticationService

        +LoginController(view: LoginView, authService: AuthenticationService)

        ' handle login will extract the creditials & call authenticateservice
        +handleLogin(): void
        -extractCredentials(): LoginCredentials
        -validateInputNotEmpty(): boolean
    }

    +class RegisterView {
        -emailInput: JTextField
        -usernameInput: JTextField
        -passwordInput: JPasswordField
        -confirmPasswordInput: JPasswordField
        -submitButton: JButton
        -errorLabel: JLabel

        +RegisterView()

        +show(): void
        +hide(): void
        +displayIncorrectUsername(): void
        +displayIncorrectPassword(): void
        +displaySuccess(): void
        ' when user click on submit -> handle register
        +addRegisterListener(listener: ActionListener): void
    }

    +class RegisterController {
        -view: RegisterView
        -authService: AuthenticationService

        +RegisterController(view: RegisterView, authService: AuthenticationService)

        +handleRegistration(): void
        -extractRegistrationData(): RegistrationData
        -validateInputNotEmpty(): boolean
        -validatePasswordsMatch(): boolean
    }

    +class ProfileView {
        +ProfileView()
    }

    +class ProfileController {
        -view: ProfileView

        +ProfileController(view: ProfileView)
    }

    +class CommunityView {
        +CommunityView()
    }

    +class CommunityController {
        -view: CommunityView

        +CommunityController(view: CommunityView)
    }
}

package domain {
    package creditialData {
        +class User {
            -userid: String
            -username: String
            -email: String

            +User(userId: String, email: String, username: String)

            +matches(credentials: LoginCredentials): boolean
            +hashCode(): int
        }

        +class SecureUser {
            -user: User
            -passwordHash: String
            -salt: String

            +SecureUser(user: User, passwordHash: String, salt: String)

            +authenticateWith(credentials: LoginCredentials): boolean
            +getUser(): User
        }

        +class LoginCredentials {
            -username: String
            -password: String

            +LoginCredentials(username: String, password: String)

            +validateFormat(): InputValidationResult
            +hashWith(salt: String): String
        }

        +class RegistrationData {
            -email: String
            -username: String
            -password: String

            +RegistrationData(email: String, username: String, password: String)

            +validateFormat(): InputValidationResult
            +toUser(): User
        }
    }
    package authenticate {
        +class AuthenticationService {
            -userData: UserData
            -passwordEncoder: PasswordEncoder

            +AuthenticationService(userData: UserData, passwordEncoder: PasswordEncoder)

            +authenticate(credentials: LoginCredentials): AuthenticationResult
            +register(registrationData: RegistrationData): RegistrationResult

            -validateRegistrationData(data: RegistrationData): InputValidationResult
            -checkUserExists(username: String, email: String): boolean
            -createSecureUser(data: RegistrationData): SecureUser
        }

        +class PasswordEncoder {
            +generateSalt(): String
            +hash(password: String, salt: String): String
            +verify(password: String, salt: String, hashedPassword: String): boolean
        }

        +class InputValidationResult {
            -isValid: boolean
            -errorMessage: String

            +InputValidationResult(isValid: boolean, errorMessage: String)

            +isValid(): boolean
            +getErrorMessage(): String
            +success(): InputValidationResult
            +failure(message: String): InputValidationResult
        }

        +class AuthenticationResult {
            -success: boolean
            -user: User
            -errorMessage: String

            +AuthenticationResult(success: boolean, user: User, errorMessage: String)

            +isSuccess(): boolean
            +getUser(): User
            +getErrorMessage(): String
            +success(user: User): AuthenticationResult
            +failure(message: String): AuthenticationResult
        }

        +class RegistrationResult {
            -success: boolean
            -user: User
            -errorMessage: String

            +RegistrationResult(success: boolean, user: User, errorMessage: String)

            +isSuccess(): boolean
            +getUser(): User
            +getErrorMessage(): String
            +success(user: User): RegistrationResult
            +failure(message: String): RegistrationResult
        }
    }

}

package datasource {
    +class UserData {
        +save(secureUser: SecureUser): void
    }

}

' presentation dependencies
HomeScreenView ..> Main
LoginView ..> Main
RegisterView ..> Main
ProfileView ..> Main
CommunityView ..> Main

HomeScreenController --> HomeScreenView

LoginController --> LoginView
LoginController --> AuthenticationService

RegisterController --> RegisterView
RegisterController --> AuthenticationService

ProfileController --> ProfileView
CommunityController --> CommunityView

' domain dependencies
AuthenticationService --> UserData
AuthenticationService --> PasswordEncoder
AuthenticationService --> InputValidationResult
AuthenticationService --> AuthenticationResult
AuthenticationService --> RegistrationResult
LoginCredentials --> InputValidationResult
RegistrationData --> InputValidationResult
RegistrationData -u-> User
SecureUser -u-> User
SecureUser --> LoginCredentials

' datasource dependencies


' Dependencies between layers
LoginController ..> LoginCredentials
LoginController ..> AuthenticationResult
RegisterController ..> RegistrationData
RegisterController ..> RegistrationResult

@enduml