@startuml
package presentation {
    +class Main {
        +{static}main(args: String[]): void
    }

    +class LoginView {
        -usernameInput: JTextField
        -passwordInput: JPasswordField
        -submitButton: JButton
        -errorLabel: JLabel

        +LoginView()

        +show(): void
        +hide(): void
        +displayIncorrectUsername(): void
        +displayIncorrectPassword(): void
        +displaySuccess(): void
    }

    +class LoginController {
        -view: LoginView
        -authService: Authentication

        +LoginController(view: LoginView, authService: Authentication)

        ' handle login will extract the credentials & call authenticateservice
        +handleLogin(): void
        -extractCredentials(): LoginCredentials
        -validateInputNotEmpty(): boolean
    }

    +class RegisterView {
        -emailInput: JTextField
        -usernameInput: JTextField
        -passwordInput: JPasswordField
        -confirmPasswordInput: JPasswordField
        -submitButton: JButton
        -errorLabel: JLabel

        +RegisterView()

        +show(): void
        +hide(): void
        +displayIncorrectUsername(): void
        +displayIncorrectPassword(): void
        +displaySuccess(): void
    }

    +class RegisterController {
        -view: RegisterView
        -authService: Authentication

        +RegisterController(view: RegisterView, authService: Authentication)

        +handleRegistration(): void
        -extractRegistrationData(): RegistrationData
        -validateInputNotEmpty(): boolean
        -validatePasswordsMatch(): boolean
    }

    +class RecommendBookView {
        -bookChooser: JComboBox<Book>
        -recipientChooser: JComboBox<String>
        -recommendToUserButton: JButton
        -recommendToGroupButton: JButton
        -error: JLabel

        +RecommendBookView()
        +displaySuccess(): void
        +displayError(): void
    }

    +class RecommendBookController {
        -view: RecommendBookView
        -user: User

        +RecommendBookController(view: RecommendBookView, user: User)
        +handleRecommendToUser(): void
        +handleRecommendToGroup(): void
    }

    +class BookView {
        -uploadBookButton: JButton
        -submitButton: JButton
        -bookFileChooser: JFileChooser
        -bookGenreChooser: JComboBox<Genre>
        -bookStatusChooser: JComboBox<BookStatus>
        -bookProgressInput: JLabel
        -bookNumStarsInput: JComboBox<int>
        -bookReviewInput: JLabel
        -errorLabel: JLabel
        -openVirtualReaderButton: JButton

        +BookView()

        +displayAvailableBooks(books: List<Book>): void
        +displayBookProgress(): void
        +displayBookProgressSuccess(): void
        +displayBookStatus(): void
        +displayBookStatusSuccess(): void
        +displayBookReview(): void
        +displayReviewSuccess(): void
        +openVirtualReader(): void
        +displayError(): void
        +show(): void
        +hide(): void
    }

    +class BookController {
        -view: BookView
        -userDetails: UserDetails
        -currentGroup: BookGroup
        -bookReader: BookReader

        +BookController(view: BookView, userDetails: UserDetails, group: BookGroup)

        +handleAddBook(): void
        +handleEditBook(updatedBook: Book): void
        +handleRemoveBook(book: Book): void
        -uploadBook(bookFile: File): Book
        +handleUpdateBookProgress(numPagesRead: int): void
        +handleUpdateBookStatus(bookStatus: BookStatus): void
        +handleAddReview(stars: int, review: String): void
        +handleOpenVirtualReader(book: Book): void
    }

    +class CreateGroupView {
            -groupNameInput: JTextField
            -descriptionInput: JTextArea
            -createButton: JButton
            -cancelButton: JButton
            -errorLabel: JLabel

            +CreateGroupView()

            +displayError(): void
            +displaySuccess(): void

    }

    +class CreateGroupController {
        -view: CreateGroupView
        -bookGroupService: BookGroupService
        -currentUser: User

        +CreateGroupController(view: CreateGroupView, bookGroupService: BookGroupService)

        +setCurrentUser(user: User): void
        +handleCreateGroup(): void
        +handleCancel(): void
        -extractGroupData(): CreateGroupData
        -validateInputNotEmpty(): boolean
    }

    +class GroupDetailsView {
        -groupNameLabel: JLabel
        -descriptionLabel: JLabel
        -joinButton: JButton
        -memberCountLabel: JLabel
        -statisticsButton: JButton

        +GroupDetailsView()

        +show(): void
        +hide(): void
        +displayGroupDetails(group: BookGroup): void
        +displayGroupLibrary(): void
        +displayJoinSuccess(): void
        +displayError(message: String): void
    }

    +class GroupDetailsController {
        -view: GroupDetailsView
        -bookGroupService: BookGroupService
        -currentUser: User
        -currentGroup: BookGroup
        -groupLibrary: List<Book>

        +GroupDetailsController(view: GroupDetailsView, bookGroupService: BookGroupService)

        +setCurrentUser(user: User): void
        +setCurrentGroup(group: BookGroup): void
        +handleJoinGroup(): void
        +handleDisplayGroupLibrary(): void
    }

    +class BookDiscussionView {
        -postContentField: JTextArea
        -submitPostButton: JButton
        -selectBookDropdown: JComboBox<Book>
        -discussionList: JList<BookDiscussion>
        -commentContentField: JTextArea
        -submitCommentButton: JButton
        -errorLabel: JLabel

        +BookDiscussionView()
        +displayDiscussions(discussions: List<BookDiscussion>): void
        +displayPostSuccess(): void
        +displayCommentSuccess(): void
        +displayError(message: String): void
    }

    +class BookDiscussionController {
        -view: BookDiscussionView
        -user: User
        -group: BookGroup

        +BookDiscussionController(view: BookDiscussionView, user: User, group: BookGroup)
        +handlePostDiscussion(): void
        +handleAddComment(comment: DiscussionComment): void
    }

    +class GroupStatisticsView {
        -totalBooksLabel: JLabel
        -popularGenresPanel: JPanel
        -popularBooksList: JList<Book>
        -selectBookButton: JButton
        -errorLabel: JLabel

        +GroupStatisticsView()
        +displayStatistics(stats: GroupStatistics): void
        +displayError(message: String): void
        +displayBookSelectionSuccess(): void
        +show(): void
        +hide(): void
    }

    +class GroupStatisticsController {
        -view: GroupStatisticsView
        -statisticsService: GroupStatisticsService
        -currentUser: User
        -currentGroup: BookGroup

        +GroupStatisticsController(view: GroupStatisticsView, statisticsService: GroupStatisticsService)
        +setCurrentUser(user: User): void
        +setCurrentGroup(group: BookGroup): void
        +handleViewStatistics(): void
        +handleSelectBook(book: Book): void
        -isBookAvailable(book: Book): boolean
    }

    +class CommunityGoalsView {
        -viewGoalsButton: JButton
        -setBooksCountInput: JSpinner
        -bookSelector1: JComboBox<Book>
        -bookSelector2: JComboBox<Book>
        -bookSelector3: JComboBox<Book>
        -setGoalButton: JButton
        -warningLabel: JLabel
        -successLabel: JLabel

        +CommunityGoalsView()
        +displayWarningBookNotInLibrary(): void
        +displaySuccess(): void
        +showAdminControls(isAdmin: boolean): void
    }

    +class CommunityGoalsController {
        -view: CommunityGoalsView
        -goalsService: CommunityGoalsService
        -currentUser: User
        -currentGroup: BookGroup

        +CommunityGoalsController(view: CommunityGoalsView, goalsService: CommunityGoalsService)
        +handleViewGoals(): void
        +handleSetGoal(): void
        -isUserAdmin(): boolean
        -validateGoalData(): boolean
    }

    +class VirtualReaderView {
        -bookDisplayPanel: JPanel
        -currentPageLabel: JLabel
        -totalPagesLabel: JLabel
        -previousPageButton: JButton
        -nextPageButton: JButton
        -pageNumberInput: JTextField
        -goToPageButton: JButton
        -closeBookButton: JButton
        -bookContentArea: JTextArea
        -progressBar: JProgressBar

        +VirtualReaderView()
        +displayBook(book: Book, currentPage: int): void
        +updatePageDisplay(currentPage: int, totalPages: int): void
        +displayBookContent(content: String): void
        +updateProgressBar(progress: double): void
        +show(): void
        +hide(): void
    }

    +class VirtualReaderController {
        -view: VirtualReaderView
        -bookReader: BookReader
        -currentSession: ReadingSession
        -currentUser: User

        +VirtualReaderController(view: VirtualReaderView, bookReader: BookReader)
        +setCurrentUser(user: User): void
        +handleOpenBook(book: Book): void
        +handlePageNavigation(newPage: int): void
        +handlePreviousPage(): void
        +handleNextPage(): void
        +handleGoToPage(): void
        +handleCloseBook(): void
        -validatePageNumber(pageNumber: int): boolean
        -updateViewWithCurrentPage(): void
    }
}

package domain
{
    package authenticate {
        package CredentialData {
            +class User {
                -userid: String
                -username: String
                -email: String

                +User(userId: String, email: String, username: String)
                +matches(credentials: LoginCredentials): boolean
                +hashCode(): int
            }

            +class SecureUser {
                -user: User
                -passwordHash: String
                -salt: String

                +SecureUser(user: User, passwordHash: String, salt: String)
                +authenticateWith(credentials: LoginCredentials): boolean
                +getUser(): User
            }

            +class LoginCredentials {
                -username: String
                -password: String

                +LoginCredentials(username: String, password: String)
                +validateFormat(): InputValidationResult
                +hashWith(salt: String): String
            }

            +class RegistrationData {
                -email: String
                -username: String
                -password: String

                +RegistrationData(email: String, username: String, password: String)
                +validateFormat(): InputValidationResult
                +toUser(): User
            }
        }

        +interface AuthenticationStrategy {
            +authenticate(credentials: LoginCredentials): AuthenticationResult
        }

        +class ExampleAuthenticationStrategy {
            -userData: UserData
            -passwordEncoder: PasswordEncoder

            +ExampleAuthenticationStrategy(userData: UserData, passwordEncoder: PasswordEncoder)
            +authenticate(credentials: LoginCredentials): AuthenticationResult
        }

        +abstract class AuthenticationTemplate {
            +authenticate(credentials: LoginCredentials): AuthenticationResult
            #validateCredentials(credentials: LoginCredentials): InputValidationResult
            #findUser(username: String): SecureUser
            #verifyPassword(credentials: LoginCredentials, user: SecureUser): boolean
            #createResult(user: User, success: boolean, message: String): AuthenticationResult
        }

        +class Authentication {
            -userData: UserData
            -passwordEncoder: PasswordEncoder

            +Authentication(userData: UserData, passwordEncoder: PasswordEncoder)

            +authenticate(credentials: LoginCredentials): AuthenticationResult
            +register(registrationData: RegistrationData): RegistrationResult

            -validateRegistrationData(data: RegistrationData): InputValidationResult
            -checkUserExists(username: String, email: String): boolean
            -createSecureUser(data: RegistrationData): SecureUser
        }

        +class PasswordEncoder {
            +generateSalt(): String
            +hash(password: String, salt: String): String
            +verify(password: String, salt: String, hashedPassword: String): boolean
        }

        +class InputValidationResult {
            -isValid: boolean
            -errorMessage: String

            +InputValidationResult(isValid: boolean, errorMessage: String)

            +isValid(): boolean
            +getErrorMessage(): String
        }

        +class AuthenticationResult {
            -success: boolean
            -user: User
            -errorMessage: String

            +AuthenticationResult(success: boolean, user: User, errorMessage: String)

            +isSuccess(): boolean
            +getUser(): User
            +getErrorMessage(): String
        }

        +class RegistrationResult {
            -success: boolean
            -user: User
            -errorMessage: String

            +RegistrationResult(success: boolean, user: User, errorMessage: String)

            +isSuccess(): boolean
            +getUser(): User
            +getErrorMessage(): String
        }
    }
    package book {
        +class UserDetails {
            -userId: String
            -bookLibrary: List<Book>
            -bookGroups: List<BookGroup>

            +UserDetails(userId: String)

            +userIdMatches(id: String): boolean
            +addBook(book: Book): boolean
            +joinBookGroup(bookGroup: BookGroup): boolean
            +recommendBook(book: Book): boolean
            +editBook(updatedBook: Book): boolean
            +removeBook(book: Book): boolean

            +getReadingProgress(bookId: String): ReadingProgress
            +updateReadingProgress(bookId: String, progress: ReadingProgress): void
            +getPersonalBooks(): List<Book>
            +getGroupBooks(): List<Book>
        }

        +class Book {
            -bookId: String
            -genre: Genre
            -totalPages: int
            -pagesRead: int
            -starReview: int
            -writtenReview: String
            -bookFile: File
            -bookStatus: BookStatus
            -bookReview: BookReview
            -currentPage: int

            +Book(bookFile: File, genre: Genre, totalPages: int)
            +addReview(stars: int): boolean
            +addReview(stars: int, review: String): boolean
            +addProgress(currPages: int): boolean
            +updateDetails(newGenre: Genre, newTotalPages: int): void
        }

        +class BookReview {
            -numStars: int
            -review: String

            +BookReview(numStars: int, review: String)
        }

        +enum Genre {
            ACTION
            FICTION
            HISTORICAL
            HORROR
            MYSTERY
            NON-FICTION
            ROMANCE
            SCIENCE_FICTION
        }

        +enum BookStatus {
            WANT_TO_READ
            READING
            READ
        }

        +class BookDiscussion {
            -discussionId: String
            -author: User
            -book: Book
            -groupId: String
            -content: String
            -timestamp: Date
            -comments: List<DiscussionComment>

            +BookDiscussion(author: User, book: Book, groupId: String, content: String)
            +addComment(comment: DiscussionComment): void
        }

        +class DiscussionComment {
            -commentId: String
            -author: User
            -content: String
            -timestamp: Date

            +DiscussionComment(author: User, content: String)
        }
    }

    +class RecommendationService {
        -userData: User
        -groupData: BookGroup

        +RecommendationService(user: User, bookGroup: BookGroup)
        +recommendToUser(sender: User, recipient: String, book: Book): boolean
        +recommendToUser(sender: User, recipient: String, book: Book): boolean
    }

    package bookGroup {
        +class BookGroup {
            -groupId: String
            -groupName: String
            -description: String
            -adminId: String
            -memberIds: List<String>
            -createdDate: Date
            -groupLibrary: List<Book>
            -groupDiscussions: List<BookDiscussion>

            +BookGroup(groupId: String, groupName: String, description: String, adminId: String)

            +addMember(userId: String): void
            +removeMember(userId: String): void
            +isMember(userId: String): boolean
            +addBookToLibrary(book: Book): boolean
            +addDiscussion(discussion: BookDiscussion): boolean
        }

        +class CreateGroupData {
            -groupName: String
            -description: String

            +CreateGroupData(groupName: String, description: String)
            +validateFormat(): InputValidationResult
        }

        +class BookGroupService {
            -bookGroupData: BookGroupData

            +BookGroupService(bookGroupData: BookGroupData)

            +getAllGroups(): List<BookGroup>
            +createGroup(groupData: CreateGroupData, adminId: String): CreateGroupResult
            +joinGroup(groupId: String, userId: String): JoinGroupResult
            -validateCreateGroupData(data: CreateGroupData): InputValidationResult
        }

        +class CreateGroupResult {
            -success: boolean
            -bookGroup: BookGroup
            -errorMessage: String

            +CreateGroupResult(success: boolean, bookGroup: BookGroup, errorMessage: String)
            +isSuccess(): boolean
        }

        +class JoinGroupResult {
            -success: boolean
            -bookGroup: BookGroup
            -errorMessage: String

            +JoinGroupResult(success: boolean, bookGroup: BookGroup, errorMessage: String)
            +isSuccess(): boolean
        }
    }

    package readingStats {
        +class GroupStatistics {
            -totalBooksRead: int
            -popularGenres: Map<Genre, Integer>
            -popularBooks: List<Book>
            -groupId: String

            +GroupStatistics(groupId: String, totalBooksRead: int, popularGenres: Map<Genre, Integer>, popularBooks: List<Book>)
        }

        +class GroupStatisticsService {
            -bookGroupData: BookGroupData
            -userData: UserData

            +GroupStatisticsService(bookGroupData: BookGroupData, userData: UserData)
            +generateGroupStatistics(groupId: String): GroupStatistics
            +isBookAvailableToUser(book: Book, user: User, group: BookGroup): boolean
            -calculateTotalBooksRead(groupId: String): int
            -calculatePopularGenres(groupId: String): Map<Genre, Integer>
            -calculatePopularBooks(groupId: String): List<Book>
        }
    }

    package communityGoals {
        +class CommunityReadingGoal {
            -goalId: String
            -groupId: String
            -targetBooksCount: int
            -specificBooks: List<Book>
            -createdBy: String

            +CommunityReadingGoal(groupId: String, targetBooksCount: int, specificBooks: List<Book>, createdBy: String)
            +validateBooksCount(): boolean
            +validateSpecificBooks(): boolean
        }

        +class CommunityGoalsService {
            -bookGroupService: BookGroupService
            -goalsData: CommunityGoalsData

            +CommunityGoalsService(bookGroupService: BookGroupService, goalsData: CommunityGoalsData)
            +setGoal(groupId: String, targetBooksCount: int, specificBooks: List<Book>, adminId: String): GoalResult
            +isUserAdmin(userId: String, groupId: String): boolean
            +validateBooksInLibrary(books: List<Book>, groupId: String): List<Book>
        }

        +class GoalResult {
            -success: boolean
            -missingBooks: List<Book>
            -errorMessage: String

            +GoalResult(success: boolean, missingBooks: List<Book>, errorMessage: String)
            +isSuccess(): boolean
        }
    }

    package virtualReading {
        +class ReadingSession {
            -sessionId: String
            -book: Book
            -user: User
            -currentPage: int
            -sessionStartTime: Date
            -lastAccessTime: Date

            +ReadingSession(book: Book, user: User, startingPage: int)
            +setCurrentPage(page: int): void
            +updateLastAccessTime(): void
        }

        +class BookReader {
            -readingProgressData: ReadingProgressData
            -activeSessions: Map<String, ReadingSession>

            +BookReader(readingProgressData: ReadingProgressData)
            +openBook(book: Book, user: User): ReadingSession
            +saveProgress(session: ReadingSession): void
            +closeBook(session: ReadingSession): void
            +navigateToPage(session: ReadingSession, pageNumber: int): boolean
            -createReadingSession(book: Book, user: User): ReadingSession
        }

        +class ReadingProgress {
            -userId: String
            -bookId: String
            -lastPageRead: int
            -totalPages: int
            -lastReadDate: Date
            -readingStatus: BookStatus

            +ReadingProgress(userId: String, bookId: String, totalPages: int)
            +updateProgress(pageNumber: int): void
            +isCompleted(): boolean
        }
    }
}

package datasource
{
    package dto {
        +class UserDTO {
            +userId: String
            +username: String
            +email: String
            +passwordHash: String
            +salt: String

            +UserDTO()
            +UserDTO(userId: String, username: String, email: String, passwordHash: String, salt: String)
        }

        +class BookGroupDTO {
            +groupId: String
            +groupName: String
            +description: String
            +adminId: String
            +memberIds: List<String>
            +createdDate: String

            +BookGroupDTO()
            +BookGroupDTO(groupId: String, groupName: String, description: String, adminId: String, memberIds: String, createdDate: String)
        }

        +class CommunityGoalDTO {
            +goalId: String
            +groupId: String
            +targetBooksCount: int
            +specificBookIds: List<String>
            +createdBy: String

            +CommunityGoalDTO(goalId: String, groupId: String, targetBooksCount: int, specificBookIds: List<String>, createdBy: String)
        }

        +class ReadingProgressDTO {
            +userId: String
            +bookId: String
            +lastPageRead: int
            +totalPages: int
            +lastReadDate: String
            +readingStatus: String

            +ReadingProgressDTO()
            +ReadingProgressDTO(userId: String, bookId: String, lastPageRead: int, totalPages: int, lastReadDate: String, readingStatus: String)
        }
    }

    +interface UserData {
        +save(userDTO: UserDTO): void
        +findByUsername(username: String): UserDTO
        +findByEmail(email: String): UserDTO
        +exists(username: String, email: String): boolean
    }

    +interface BookGroupData {
        +save(bookGroupDTO: BookGroupDTO): void
        +findById(groupId: String): BookGroupDTO
        +findAll(): List<BookGroupDTO>
        +findByMemberId(userId: String): List<BookGroupDTO>
        +update(bookGroupDTO: BookGroupDTO): void
    }

    +interface CommunityGoalsData {
        +save(goalDTO: CommunityGoalDTO): void
        +findByGroupId(groupId: String): CommunityGoalDTO
    }

     +interface ReadingProgressData {
        +save(progressDTO: ReadingProgressDTO): void
        +findByUserAndBook(userId: String, bookId: String): ReadingProgressDTO
        +findByUserId(userId: String): List<ReadingProgressDTO>
        +update(progressDTO: ReadingProgressDTO): void
        +delete(userId: String, bookId: String): void
    }

    +class ExampleUserDataBase {
        -users: Map<String, UserDTO>
        -usersByEmail: Map<String, UserDTO>

        +ExampleUserDatabase()

        +save(userDTO: UserDTO): void
        +findByUsername(username: String): UserDTO
        +findByEmail(email: String): UserDTO
        +exists(username: String, email: String): boolean
        -loadUsersFromFile(): void
        -saveUsersToFile(): void
    }

    +class ExampleBookGroupDataBase {
        -groups: Map<String, BookGroupDTO>

        +ExampleBookGroupDatabase()

        +save(bookGroupDTO: BookGroupDTO): void
        +findById(groupId: String): BookGroupDTO
        +findAll(): List<BookGroupDTO>
        +findByMemberId(userId: String): List<BookGroupDTO>
        +update(bookGroupDTO: BookGroupDTO): void
        -loadGroupsFromFile(): void
        -saveGroupsToFile(): void
    }

    +class ExampleCommunityGoalsDataBase {
        -goals: Map<String, CommunityGoalDTO>

        +ExampleCommunityGoalsDatabase()
        +save(goalDTO: CommunityGoalDTO): void
        +findByGroupId(groupId: String): CommunityGoalDTO
    }

    +class ExampleReadingProgressDataBase {
        -progressMap: Map<String, ReadingProgressDTO>

        +ExampleReadingProgressDatabase()
        +save(progressDTO: ReadingProgressDTO): void
        +findByUserAndBook(userId: String, bookId: String): ReadingProgressDTO
        +findByUserId(userId: String): List<ReadingProgressDTO>
        +update(progressDTO: ReadingProgressDTO): void
        +delete(userId: String, bookId: String): void
        -loadProgressFromFile(): void
        -saveProgressToFile(): void
    }
}

' presentation dependencies
LoginView ..> Main
RegisterView ..> Main
CreateGroupView ..> Main
GroupDetailsView ..> Main
BookView ..> Main
RecommendBookView ..> Main
BookDiscussionView ..> Main
GroupStatisticsView ..> Main
CommunityGoalsView ..> Main
VirtualReaderView ..> Main

LoginController --> LoginView
RegisterController --> RegisterView
BookController --> BookView
RecommendBookController --> RecommendBookView
CreateGroupController --> CreateGroupView
GroupDetailsController --> GroupDetailsView
BookDiscussionController --> BookDiscussionView
GroupStatisticsController --> GroupStatisticsView
CommunityGoalsController --> CommunityGoalsView
VirtualReaderController --> VirtualReaderView

LoginController --> Authentication
LoginController ..> LoginCredentials
LoginController ..> AuthenticationResult

RegisterController --> Authentication
RegisterController ..> RegistrationData
RegisterController ..> RegistrationResult

BookController --> BookView
BookController --> UserDetails
BookController --> Book
BookController --> BookGroup
BookController --> BookReader

RecommendBookController --> RecommendationService
RecommendBookController --> User

CreateGroupController --> BookGroupService
CreateGroupController --> User
CreateGroupController ..> CreateGroupData
CreateGroupController ..> CreateGroupResult

GroupDetailsController --> BookGroupService
GroupDetailsController --> User
GroupDetailsController ..> BookGroup
GroupDetailsController ..> JoinGroupResult

BookDiscussionController --> User
BookDiscussionController --> BookGroup
BookDiscussionController --> BookDiscussion

GroupStatisticsController --> GroupStatisticsService
GroupStatisticsController --> User
GroupStatisticsController --> BookGroup
GroupStatisticsController ..> GroupStatistics

CommunityGoalsController --> CommunityGoalsService
CommunityGoalsController --> User
CommunityGoalsController --> BookGroup

VirtualReaderController --> BookReader
VirtualReaderController --> ReadingSession
VirtualReaderController --> User

' domain dependencies
Authentication --> UserData
Authentication --> PasswordEncoder
Authentication --> "*" InputValidationResult
Authentication --> AuthenticationResult
Authentication --> RegistrationResult

Authentication --> AuthenticationStrategy
ExampleAuthenticationStrategy ..|> AuthenticationStrategy
AuthenticationTemplate <|-- ExampleAuthenticationStrategy

SecureUser -u-> User
SecureUser --> LoginCredentials

LoginCredentials --> InputValidationResult

RegistrationData --> InputValidationResult
RegistrationData -u-> User

User --> UserDetails

AuthenticationResult --> User
RegistrationResult --> User

UserDetails --> "*" Book
UserDetails --> BookGroup
UserDetails --> "*" ReadingProgress

Book --> Genre
Book --> BookStatus
Book --> BookReview

BookGroup --> "*" BookDiscussion
BookGroup --> "*" Book

BookDiscussion --> "*" DiscussionComment
BookDiscussion --> User
BookDiscussion --> Book

DiscussionComment --> User
DiscussionComment --> Book

BookGroupService --> BookGroupData
BookGroupService --> CreateGroupData
BookGroupService --> CreateGroupResult
BookGroupService --> JoinGroupResult
BookGroupService --> BookGroup

CreateGroupData --> InputValidationResult

CreateGroupResult --> BookGroup
JoinGroupResult --> BookGroup

RecommendationService --> UserDetails
RecommendationService --> BookGroup
RecommendationService --> User
RecommendationService --> Book

GroupStatisticsService --> BookGroupData
GroupStatisticsService --> UserData
GroupStatisticsService --> GroupStatistics
GroupStatisticsService --> BookGroup
GroupStatisticsService --> User
GroupStatisticsService --> Book

GroupStatistics --> "*" Genre
GroupStatistics --> "*" Book

CommunityGoalsService --> BookGroupService
CommunityGoalsService --> CommunityGoalsData
CommunityGoalsService --> CommunityReadingGoal
CommunityGoalsService --> GoalResult
CommunityGoalsService --> BookGroup
CommunityGoalsService --> Book

CommunityReadingGoal --> "*" Book
GoalResult --> "*" Book

BookReader --> ReadingProgressData
BookReader --> ReadingProgress
BookReader --> Book
BookReader --> User
BookReader --> ReadingSession

ReadingSession --> Book
ReadingSession --> User

ReadingProgress --> BookStatus

' datasource dependencies
BookGroupData --> BookGroupDTO
UserData --> UserDTO
CommunityGoalsData --> CommunityGoalDTO
ReadingProgressData --> ReadingProgressDTO

ExampleUserDataBase ..|> UserData
ExampleBookGroupDataBase ..|> BookGroupData
ExampleCommunityGoalsDataBase ..|> CommunityGoalsData
ExampleReadingProgressDataBase ..|> ReadingProgressData
@enduml
